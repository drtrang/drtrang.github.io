<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Trang&#39;s Blog</title>
  <subtitle>闷不骚写代码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.trang.space/"/>
  <updated>2017-08-10T16:00:00.000Z</updated>
  <id>http://blog.trang.space/</id>
  
  <author>
    <name>Trang</name>
    <email>donghao.l@hotmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 的 Maven 项目原型</title>
    <link href="http://blog.trang.space/2017/08/11/Spring%20Boot%20%E7%9A%84%20Maven%20%E9%A1%B9%E7%9B%AE%E5%8E%9F%E5%9E%8B/"/>
    <id>http://blog.trang.space/2017/08/11/Spring Boot 的 Maven 项目原型/</id>
    <published>2017-08-10T16:00:00.000Z</published>
    <updated>2017-08-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>随着微服务的流行，Spring Boot 在广大开发者中占据了越来越重要的位置，其开箱即用、自动配置的特性也给我们带来了诸多便利。</p>
<p>然而 Spring Boot 只是一个基础框架，我们还是需要新建工程、技术选型、参数配置等一系列步骤才能搭建出一个完整的项目，繁冗又无趣，尤其对于初学者来说，这一过程还可能会出现各种各样莫名其妙的问题。</p>
<p><a href="https://github.com/drtrang/maven-archetype-springboot" target="_blank" rel="external">Spring Boot Archetype</a> 则是为了解决上述痛点而打造，借助 <code>maven-archetype-plugin</code> 插件，预置了日志、缓存、AOP、数据访问、代码生成、文档生成等模块，并提供常见技术的最佳实践，用户只需几秒即可快速构建一个可运行的 Spring Boot 项目。</p>
<h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p>主页：<a href="https://github.com/drtrang/maven-archetype-springboot" target="_blank" rel="external">https://github.com/drtrang/maven-archetype-springboot</a><br>问题：<a href="https://github.com/drtrang/maven-archetype-springboot/issues" target="_blank" rel="external">https://github.com/drtrang/maven-archetype-springboot/issues</a><br>后续计划：<a href="https://github.com/drtrang/maven-archetype-springboot/blob/master/TODO.md" target="_blank" rel="external">https://github.com/drtrang/maven-archetype-springboot/blob/master/TODO.md</a></p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>基于 Spring Boot 1.5.6，内嵌 Jetty</li>
<li>增加全局异常捕获、view to json 等功能</li>
<li>集成通用 Mapper 和 PageHelper，提供 BaseService，常用 CRUD 无需编写代码</li>
<li>集成 MyBatis Generator，提供 <a href="https://github.com/drtrang/mybatis-generator-extension" target="_blank" rel="external">MBG Plugin Extension</a>，如自动生成 Service 插件、支持 Lombok 插件等等</li>
<li>集成 <a href="https://github.com/drtrang/druid-spring-boot" target="_blank" rel="external">Druid Spring Boot Starter</a>，无需显式声明数据源（支持多数据源）</li>
<li>集成 Swagger2，HTTP 接口自动生成接口文档</li>
<li>提供常用工具，如 SpringContextHolder、SqlMapper</li>
</ul>
<h2 id="ISSUE"><a href="#ISSUE" class="headerlink" title="ISSUE"></a>ISSUE</h2><p>项目刚刚发布，许多方面还有不足，希望大家多提意见，如果有任何想法和讨论，都可以放到 <a href="https://github.com/drtrang/maven-archetype-springboot/issues" target="_blank" rel="external">ISSUE</a> 平台，我会及时回复。有条件的用户还可以提 PR，成为该项目的 Contributor。</p>
<h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><p>QQ：349096849<br>Email：donghao.l@hotmail.com<br>Blog：<a href="http://blog.trang.space">Trang’s Blog</a></p>
]]></content>
    
    <summary type="html">
    
      Spring Boot Archetype 将帮助你快速生成 Spring Boot 项目
    
    </summary>
    
      <category term="最佳实践" scheme="http://blog.trang.space/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.trang.space/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Druid Spring Boot Starter</title>
    <link href="http://blog.trang.space/2017/07/13/Druid%20Spring%20Boot%20Starter/"/>
    <id>http://blog.trang.space/2017/07/13/Druid Spring Boot Starter/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-07-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.drtrang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="NEW"><a href="#NEW" class="headerlink" title="NEW !"></a>NEW !</h2><ol>
<li>新增 ConfigFilter 的自动配置，替换 Druid 默认的 <code>connectionProperties</code> 方式</li>
<li>完美支持多数据源 <a href="https://github.com/drtrang/druid-spring-boot/issues/2" target="_blank" rel="external">ISSUE #2</a></li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h3><p>在引入依赖的情况下，只需如下配置即可使用 Druid：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    driver-class-name:</span> <span class="string">org.h2.Driver</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:h2:file:./samples</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="number">123456</span></div></pre></td></tr></table></figure>
<h3 id="Druid-连接池"><a href="#Druid-连接池" class="headerlink" title="Druid 连接池"></a>Druid 连接池</h3><p>Druid Spring Boot Starter 会将以 <code>spring.datasource.druid</code> 为前缀的配置注入到 DruidDataSource，且 DruidDataSource 中的所有参数均可自定义。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    druid:</span></div><div class="line"><span class="attr">      initial-size:</span> <span class="number">1</span></div><div class="line"><span class="attr">      min-idle:</span> <span class="number">1</span></div><div class="line"><span class="attr">      max-active:</span> <span class="number">10</span></div><div class="line"><span class="attr">      validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span></div><div class="line"><span class="attr">      test-while-idle:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      test-on-borrow:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      test-on-return:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      pool-prepared-statements:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      max-open-prepared-statements:</span> <span class="number">20</span></div><div class="line"><span class="attr">      use-global-data-source-stat:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="Druid-高级特性"><a href="#Druid-高级特性" class="headerlink" title="Druid 高级特性"></a>Druid 高级特性</h3><p>Druid Spring Boot Starter 添加了 Druid 的大部分特性，如 StatFilter、WallFilter、ConfigFilter、WebStatFilter 等，其中 StatFilter 默认打开，其它特性默认关闭，需要手动开启。</p>
<p>同样，每个特性的参数均可自定义，具体配置可以用 IDE 的自动提示功能或者阅读 Druid 的 <a href="https://github.com/alibaba/druid/wiki/%E9%A6%96%E9%A1%B5" target="_blank" rel="external">Wiki</a> 查看。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    druid:</span></div><div class="line"><span class="attr">      slf4j:</span></div><div class="line">        <span class="comment"># 开启 Slf4jFilter</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      wall:</span></div><div class="line">        <span class="comment"># 开启 WallFilter</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">        config:</span></div><div class="line">          <span class="comment">## WallConfig 配置</span></div><div class="line"><span class="attr">          select-all-column-allow:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      config:</span></div><div class="line">        <span class="comment"># 开启 ConfigFilter</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      web-stat:</span></div><div class="line">        <span class="comment"># 开启 Web 监控</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      aop-stat:</span></div><div class="line">        <span class="comment"># 开启 Aop 监控</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      stat-view-servlet:</span></div><div class="line">        <span class="comment"># 开启监控页面</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h3><p>1.0.2 版本新增多数据源支持，使用方式请查看 <a href="https://github.com/drtrang/druid-spring-boot/tree/master/docs/DruidMultiDataSource.md" target="_blank" rel="external">DruidMultiDataSource.md</a>。</p>
<h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><p><a href="https://github.com/drtrang/druid-spring-boot/blob/master/druid-spring-boot-samples/src/main/resources/application.yml" target="_blank" rel="external">application.yml</a></p>
<h2 id="自动提示"><a href="#自动提示" class="headerlink" title="自动提示"></a>自动提示</h2><p>Druid Spring Boot Starter 基于 <code>spring-boot-configuration-processor</code> 模块，支持 IDE 的自动提示。</p>
<p>该功能会持续优化，致力打造最方便、最友好的 Starter。</p>
<p>自定义参数：<br><img src="https://user-images.githubusercontent.com/13851701/28149522-c1a3fc96-67c0-11e7-8ea7-630a8b3e5bfb.png" alt="druid-configuration"></p>
<p>参数说明：<br><img src="https://user-images.githubusercontent.com/13851701/28149525-d08955bc-67c0-11e7-916c-c8c5acd30b4a.png" alt="enabled"></p>
<p>参数枚举值：<br><img src="https://user-images.githubusercontent.com/13851701/28148904-3bb9b07a-67bc-11e7-9912-c7043c2d7de7.png" alt="db-type"></p>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><a href="https://github.com/drtrang/druid-spring-boot/tree/master/druid-spring-boot-samples" target="_blank" rel="external">druid-spring-boot-samples</a> 演示了 Starter 的使用方式，可以作为参考。</p>
<h2 id="Change-Log"><a href="#Change-Log" class="headerlink" title="Change Log"></a>Change Log</h2><p><a href="https://github.com/drtrang/druid-spring-boot/releases" target="_blank" rel="external">Release Notes</a></p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>任何意见和建议可以提 <a href="https://github.com/drtrang/druid-spring-boot/issues" target="_blank" rel="external">ISSUE</a>，我会酌情加到 <a href="https://github.com/drtrang/druid-spring-boot/blob/master/TODO.md" target="_blank" rel="external">Todo List</a>，一般情况一周内迭代完毕。</p>
<h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><p>QQ：349096849<br>Email：donghao.l@hotmail.com<br>Blog：<a href="http://blog.trang.space">Trang’s Blog</a></p>
]]></content>
    
    <summary type="html">
    
      Druid Spring Boot Starter 将帮助你在 Spring Boot 中使用 Druid
    
    </summary>
    
      <category term="最佳实践" scheme="http://blog.trang.space/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.trang.space/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis Type Handlers for Encrypt</title>
    <link href="http://blog.trang.space/2017/04/17/MyBatis%20Type%20Handlers%20for%20Encrypt/"/>
    <id>http://blog.trang.space/2017/04/17/MyBatis Type Handlers for Encrypt/</id>
    <published>2017-04-16T16:00:00.000Z</published>
    <updated>2017-05-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>应公司安全部门要求，需要对数据库中的敏感信息做加密处理。由于此次需求涉及的字段较多，手动加解密颇为不便且改动较大，一个更加简单、通用的解决方案势在必行。</p>
<p><code>typehandlers-encrypt</code> 项目在这种背景下诞生，用户使用时无需更改业务代码，仅需少量配置即可实现数据库指定字段的加解密操作，大大减小了对用户的影响。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><code>typehandlers-encrypt</code> 基于 MyBatis 的 TypeHandler 开发，通过 TypeHandler 可以在 JavaType 和 JdbcType 中互相转换的特性，拦截 JavaType 为 <code>com.github.trang.typehandlers.alias.Encrypt</code> 的 SQL，在预处理语句（PreparedStatement）中设置参数时自动加密，并在结果集（ResultSet）中取值时自动解密。</p>
<p>注：由于依赖 MyBatis，使用时需要将 <code>EncryptTypeHandler</code> 和 <code>Encrypt</code> 注册到 MyBatis，否则无法生效，注册方式见 <strong>声明 EncryptTypeHandler</strong>。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.drtrang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>typehandlers-encrypt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="声明-EncryptTypeHandler"><a href="#声明-EncryptTypeHandler" class="headerlink" title="声明 EncryptTypeHandler"></a>声明 EncryptTypeHandler</h3><h4 id="1-单独使用-MyBatis"><a href="#1-单独使用-MyBatis" class="headerlink" title="1. 单独使用 MyBatis"></a>1. 单独使用 MyBatis</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.github.trang.typehandlers.alias"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.github.trang.typehandlers.type"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-与-Spring-结合"><a href="#2-与-Spring-结合" class="headerlink" title="2. 与 Spring 结合"></a>2. 与 Spring 结合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(Configuration config)</span> </span>&#123;</div><div class="line">    SqlSessionFactoryBean factory = <span class="keyword">new</span> SqlSessionFactoryBean();</div><div class="line">    factory.setTypeAliasesPackage(<span class="string">"com.github.trang.typehandlers.alias"</span>);</div><div class="line">    factory.setTypeHandlersPackage(<span class="string">"com.github.trang.typehandlers.type"</span>);</div><div class="line">    <span class="keyword">return</span> factory.getObject();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-与-SpringBoot-结合"><a href="#3-与-SpringBoot-结合" class="headerlink" title="3. 与 SpringBoot 结合"></a>3. 与 SpringBoot 结合</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##application.yml</span></div><div class="line"><span class="attr">mybatis:</span></div><div class="line"><span class="attr">    type-aliases-package:</span> <span class="string">com.github.trang.typehandlers.alias</span></div><div class="line"><span class="attr">    type-handlers-package:</span> <span class="string">com.github.trang.typehandlers.type</span></div></pre></td></tr></table></figure>
<p>注：以上配置方式<strong>任选其一</strong>即可，请根据实际情况选择。</p>
<h3 id="使用-EncryptTypeHandler"><a href="#使用-EncryptTypeHandler" class="headerlink" title="使用 EncryptTypeHandler"></a>使用 EncryptTypeHandler</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- select --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">javaType</span>=<span class="string">"string"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">javaType</span>=<span class="string">"encrypt"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- insert --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></div><div class="line">    insert into user (id, username, password)</div><div class="line">    values (#&#123;id,jdbcType=BIGINT&#125;, #&#123;username,jdbcType=VARCHAR&#125;, #&#123;password, javaType=encrypt, jdbcType=VARCHAR&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- update --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></div><div class="line">    update user set password=#&#123;password, javaType=encrypt, jdbcType=VARCHAR&#125; where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p><code>typehandlers-encrypt</code> 内置了 16 位长度密钥与 AES 加密算法，支持开箱即用，但用户也可以自定义密钥和加密算法，只需要在配置文件中声明对应的属性即可。需要注意，<strong>两者同时配置时，要声明在同一文件里</strong>。</p>
<p>配置示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">encrypt.private.key=xxx</div><div class="line">encrypt.class.name=com.github.trang.typehandlers.crypt.SimpleEncrypt</div></pre></td></tr></table></figure></p>
<h3 id="配置文件查找"><a href="#配置文件查找" class="headerlink" title="配置文件查找"></a>配置文件查找</h3><p>方式一：项目启动时，会在项目的 Classpath 中依次查找名称为 <code>encrypt</code>、<code>properties/config-common</code>、<code>properties/config</code>、<code>config</code>、<code>application</code> 的 Properties 文件，直到文件存在且文件中包含名称为 <code>encrypt.private.key</code> 的属性时停止。</p>
<p>方式二：如果项目中不存在以上文件，且不想单独新增，也可以在项目启动时调用 <code>ConfigUtil.bundleNames(&quot;xxx&quot;)</code> 来指定要读取的文件，这时只会从用户给定的文件中查找。</p>
<p><strong>当没有查找到相应配置时，项目会使用内置的配置。</strong></p>
<h3 id="自定义密钥"><a href="#自定义密钥" class="headerlink" title="自定义密钥"></a>自定义密钥</h3><p><code>typehandlers-encrypt</code> 支持自定义密钥，只需在配置文件中声明即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">encrypt.private.key=xxx</div></pre></td></tr></table></figure></p>
<h3 id="自定义加密算法"><a href="#自定义加密算法" class="headerlink" title="自定义加密算法"></a>自定义加密算法</h3><p><code>typehandlers-encrypt</code> 默认的加密算法是 <strong>AES 对称加密</strong>，如果默认算法不满足实际需求，用户可以自己实现 <code>com.github.trang.typehandlers.crypt.Crypt</code> 接口，并在配置文件中声明实现类的全路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">encrypt.class.name=com.github.trang.typehandlers.crypt.SimpleEncrypt</div></pre></td></tr></table></figure></p>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>目前项目已开源，并上传到 <a href="https://github.com/drtrang/typehandlers-encrypt" target="_blank" rel="external">Github</a>，大家感兴趣的话可以阅读源码。<a href="https://github.com/drtrang/typehandlers-encrypt" target="_blank" rel="external">Github</a> 中有配套的 Demo 演示 <a href="https://github.com/drtrang/typehandlers-encrypt-demo" target="_blank" rel="external"><code>typehandlers-encrypt-demo</code></a>，其中包括 <code>typehandlers-encrypt</code> 完整的使用方式，可以作为参考。</p>
<h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><p>QQ：349096849<br>Email：donghao.l@hotmail.com<br>Blog：<a href="http://blog.trang.space">Trang’s Blog</a></p>
<blockquote>
<p><strong>注意：</strong></p>
<ol>
<li>目前 <code>EncryptTypeHandler</code> 只支持 JavaType 为 <strong>String</strong> 的情形，如有其它需求，请及时联系我。</li>
<li>加密时字段只过滤 <strong>null 值</strong>，非 null 的字段不做任何处理直接加密。</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      MyBatis 数据库加密工具
    
    </summary>
    
      <category term="最佳实践" scheme="http://blog.trang.space/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="MyBatis" scheme="http://blog.trang.space/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>应用层读写分离的改进</title>
    <link href="http://blog.trang.space/2017/04/17/%E5%BA%94%E7%94%A8%E5%B1%82%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E7%9A%84%E6%94%B9%E8%BF%9B/"/>
    <id>http://blog.trang.space/2017/04/17/应用层读写分离的改进/</id>
    <published>2017-04-16T16:00:00.000Z</published>
    <updated>2017-05-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>数据库读写分离是构建高性能 Web 架构不可缺少的一环，其主要提升在于：</p>
<ol>
<li>主从职责单一，主写从读，可以极大程度地缓解 X 锁和 S 锁的竞争，并且可以进行针对性调优</li>
<li>请求分流，减少主库压力</li>
<li>当读成为 DB 瓶颈时，很容易进行水平拓展</li>
<li>增加冗余，实现高可用，出现故障后可快速恢复，仅丢失少量数据或不丢失数据</li>
</ol>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>读写分离首先需要 DB 实例的支持，配置主库、从库以及主从同步策略，此步骤一般交给 OP 即可。实例搭建完毕后，我们就可以开发相应模块，以实现真正的读写分离。</p>
<p>业界的实现方式一般分为两种：<strong>DB 中间件</strong> 和 <strong>应用层读写分离</strong>，二者均有各自的优缺点，详情见下表：</p>
<h3 id="DB-中间件"><a href="#DB-中间件" class="headerlink" title="DB 中间件"></a>DB 中间件</h3><blockquote>
<p>优点：对于应用透明；不限语言<br>缺点：专人部署 + 维护；保证 HA、LB；一般只支持 MySQL</p>
</blockquote>
<h3 id="应用层读写分离"><a href="#应用层读写分离" class="headerlink" title="应用层读写分离"></a>应用层读写分离</h3><blockquote>
<p>优点：开发简单，团队内部可以自行消化；基于 JDBC 驱动或框架，理论支持任意类型的 DB<br>缺点：通用性差，各应用需要自己实现；手动指定数据源</p>
</blockquote>
<p>用不用 DB 中间件需要考虑实际情况，如数据体量和有没有人维护等等，本文讲的是应用层读写分离。</p>
<h2 id="当前方案"><a href="#当前方案" class="headerlink" title="当前方案"></a>当前方案</h2><p>通过自定义注解 <code>@DataSourceRoute</code>，手动声明当前方法操作的数据源，再通过切面拦截该切入点，路由到目标数据源。</p>
<p>因为实际中还要与事务结合，所以又写了一套基于事务路由主从数据源的切面，使用起来较为繁琐。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//annotation</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataSourceRoute &#123;</div><div class="line">    <span class="function">AccessType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> AccessType.MASTER</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceRouteAspect</span> </span>&#123;</div><div class="line">    <span class="meta">@Before</span>(<span class="string">"@annotation(DataSourceRoute)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint point)</span> </span>&#123;</div><div class="line">        Method targetMethod = ((MethodSignature) point.getSignature()).getMethod();</div><div class="line">        DataSourceRoute annotation = targetMethod.getAnnotation(DataSourceRoute.class);</div><div class="line">        DynamicDataSourceHolder.route(annotation.type());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//dao</span></div><div class="line"><span class="meta">@DataSourceRoute</span>(type=AccessType.SLAVE)</div><div class="line"><span class="function"><span class="keyword">public</span> Housedel <span class="title">findByPK</span><span class="params">(Long housedelCode)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mapper.findByPK(housedelCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="改进方案"><a href="#改进方案" class="headerlink" title="改进方案"></a>改进方案</h2><p>其实总结一下我们使用读写分离的场景会发现，主库一般负责写入（偶尔用来读），从库则全部用来读取。而为了保障数据的正确性，我们在写入操作时一般会加上事务（这也是我推荐的最佳实践），也就是说，大部分事务操作是在写入，大部分非事务操作则是在读取，由此可见读写分离和事务之间是有一定关联的。</p>
<p>既然思路是可行的，那我们不妨思考一下，实际使用中具体有哪些场景呢？</p>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">事务</th>
<th style="text-align:left">数据源</th>
<th style="text-align:left">操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">无</td>
<td style="text-align:left">从库</td>
<td style="text-align:left">读</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">无</td>
<td style="text-align:left">主库</td>
<td style="text-align:left">读</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">有</td>
<td style="text-align:left">从库</td>
<td style="text-align:left">读</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">有</td>
<td style="text-align:left">主库</td>
<td style="text-align:left">写</td>
</tr>
</tbody>
</table>
<p>第 1 种，无事务从库读取。典型的只读场景，我们的业务场景一般是读多写少，为了方便，可以作为默认选项。</p>
<p>第 2 种，无事务主库读取。主库中读取数据的情况还是比较少见的，一般是因为对数据的实时性要求较高，而 MySQL 的主从复制是异步的，中间会有短暂的时间差，为了保证数据的一致性，会直接从主库读取。</p>
<p>第 3 种，有事务从库读取。前面我们说道，事务一般加在写入操作上，但也有个别情况只读时也需要加入事务，比如在当前只读事务内，不希望其它事务更改数据，从而保证数据前后的一致性。</p>
<p>第 4 种，有事务主库写入。典型的写入场景，数据写入主库后，异步复制到从库。</p>
<h2 id="落地"><a href="#落地" class="headerlink" title="落地"></a>落地</h2><p>那么如何实现呢？阅读 Spring 的源码会发现，<code>DataSourceTransactionManager</code> 是 Spring 用来管理事务的类，我们只需要自定义一个事务管理器，在开启事务之前指定数据源即可。</p>
<p>有了之前的分析，我们可以得到以下规则：默认无事务时路由到从库，<strong>有事务且非只读</strong>时路由到主库。</p>
<ol>
<li><p>定义动态数据源</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicDataSource</span><span class="params">(Object defaultTargetDataSource, Map&lt;Object, Object&gt; targetDataSources)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setDefaultTargetDataSource(defaultTargetDataSource);</div><div class="line">        <span class="keyword">super</span>.setTargetDataSources(targetDataSources);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DynamicDataSourceHolder.get();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceHolder</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MASTER_DATA_SOURCE = <span class="string">"Master"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SLAVE_DATA_SOURCE = <span class="string">"Slave"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; CONTAINER = ThreadLocal.withInitial(</div><div class="line">            () -&gt; DynamicDataSourceHolder.SLAVE_DATA_SOURCE</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">routeMaster</span><span class="params">()</span> </span>&#123;</div><div class="line">        CONTAINER.set(MASTER_DATA_SOURCE);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">routeSlave</span><span class="params">()</span> </span>&#123;</div><div class="line">        CONTAINER.set(SLAVE_DATA_SOURCE);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> CONTAINER.get();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        CONTAINER.remove();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>声明动态数据源</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataSourceConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">masterDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">slaveDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DynamicDataSource <span class="title">dataSource</span><span class="params">(DruidDataSource masterDataSource, DruidDataSource slaveDataSource)</span> </span>&#123;</div><div class="line">        Map&lt;Object, Object&gt; targetDataSources = ImmutableMap.builder()</div><div class="line">                .put(MASTER_DATA_SOURCE, masterDataSource)</div><div class="line">                .put(SLAVE_DATA_SOURCE, slaveDataSource)</div><div class="line">                .build();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DynamicDataSource(slaveDataSource, targetDataSources);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重写 Spring 默认的事务管理器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceTransactionManager</span> <span class="keyword">extends</span> <span class="title">DataSourceTransactionManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doBegin</span><span class="params">(Object transaction, TransactionDefinition definition)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!definition.isReadOnly()) &#123;</div><div class="line">            DynamicDataSourceHolder.routeMaster();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.doBegin(transaction, definition);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doCleanupAfterCompletion</span><span class="params">(Object transaction)</span> </span>&#123;</div><div class="line">        DynamicDataSourceHolder.clear();</div><div class="line">        <span class="keyword">super</span>.doCleanupAfterCompletion(transaction);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>声明自定义的事务管理器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDaoConfig</span> <span class="keyword">implements</span> <span class="title">TransactionManagementConfigurer</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> DynamicDataSource dataSource;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">annotationDrivenTransactionManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DynamicDataSourceTransactionManager(dataSource);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>代码贴完了，让我们来看看能不能满足之前的 4 种场景呢？</p>
<p>其中 1、4 的区别仅仅是加不加事务，比较简单，那么待解决的还有 2 和 3。第 2 种因为没有事务，需要我们手动指定数据源，第 3 种则使用 Spring 提供的只读事务即可实现。</p>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">事务</th>
<th style="text-align:left">数据源</th>
<th style="text-align:left">操作</th>
<th style="text-align:left">实现方式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">无</td>
<td style="text-align:left">从库</td>
<td style="text-align:left">读</td>
<td style="text-align:left">默认</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">无</td>
<td style="text-align:left">主库</td>
<td style="text-align:left">读</td>
<td style="text-align:left">手动指定 <code>DynamicDataSourceHolder.routeMaster()</code></td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">有</td>
<td style="text-align:left">从库</td>
<td style="text-align:left">读</td>
<td style="text-align:left"><code>@Transactional(readOnly = true)</code></td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">有</td>
<td style="text-align:left">主库</td>
<td style="text-align:left">写</td>
<td style="text-align:left"><code>@Transactional</code></td>
</tr>
</tbody>
</table>
<p>如此一来，之前的问题都已经解决。我们仅仅通过 Spring 自带的 <code>@Transactional</code> 注解即可指定数据源，对比之前简化不少。</p>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>由于篇幅原因，文章中没有展示具体的执行结果。完整代码已打包成 <code>dynamic-data-source-demo</code>项目，并上传到 <a href="https://github.com/drtrang/dynamic-data-source-demo" target="_blank" rel="external">Github</a>，项目中提供完整的单元测试，详情大家可以 Clone 到本地自己执行一遍。</p>
<p><code>dynamic-data-source-demo</code> 项目基于 Spring Boot，集成了 MyBatis、通用 Mapper、PageHelper、Druid、Copiers，可以作为简单的脚手架使用，欢迎大家 Star 或者 Fork 到自己的仓库。</p>
<h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><p>QQ：349096849<br>Email：donghao.l@hotmail.com<br>Blog：<a href="http://blog.trang.space">Trang’s Blog</a></p>
]]></content>
    
    <summary type="html">
    
      数据库读写分离是构建高性能 Web 架构不可缺少的一环
    
    </summary>
    
      <category term="最佳实践" scheme="http://blog.trang.space/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="架构" scheme="http://blog.trang.space/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Copiers</title>
    <link href="http://blog.trang.space/2017/03/21/Copiers/"/>
    <id>http://blog.trang.space/2017/03/21/Copiers/</id>
    <published>2017-03-20T16:00:00.000Z</published>
    <updated>2017-06-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Copiers 是一个优雅的 Bean 拷贝工具，基于不同底层实现的二次封装。<br>Copiers 隐藏了底层实现，仅暴露统一的 Api 来完成 Copy 过程，用户可随时通过工厂方法切换底层的拷贝方式。</p>
<h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p>Copiers 目前有两种底层实现：<code>Cglib</code> &amp; <code>EasyMapper</code>，两种方式差明显，可根据实际情况任选其一或二者结合使用。</p>
<h3 id="Cglib"><a href="#Cglib" class="headerlink" title="Cglib"></a>Cglib</h3><p>Cglib 中的 BeanCopier 是目前性能最好的拷贝方式，基于 ASM 字节码增强技术，千万次拷贝仅在 <em>1s</em> 以内，但高性能带来的显著缺点是功能单一、拓展性差，BeanCopier 仅支持源对象到目标对象的完全拷贝，不支持自定义映射，Convert 拓展也只能对拷贝的 value 做处理，很多情况下不满足实际的业务需求。</p>
<h3 id="EasyMapper"><a href="#EasyMapper" class="headerlink" title="EasyMapper"></a>EasyMapper</h3><p><a href="https://github.com/neoremind/easy-mapper" target="_blank" rel="external">EasyMapper</a> 基于 Javassist 的字节码技术，千万次拷贝在 <em>4s</em> 左右。虽不如 BeanCopier，但大幅领先 Apache Commons BeanUtils、Dozer 等其它拷贝方式。且 EasyMapper 的优点在于使用灵活、扩展性强，具体情况可以查看 EasyMapper 的 Github， 地址：<a href="https://github.com/neoremind/easy-mapper" target="_blank" rel="external">https://github.com/neoremind/easy-mapper</a></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>通过工厂方法建立 Source 与 Target 之间的关系后，调用 <code>copy()</code> 方法即可完成 Bean 拷贝，调用 <code>map()</code> 方法即可完成 List 拷贝，简洁高效。</p>
<h3 id="简单拷贝"><a href="#简单拷贝" class="headerlink" title="简单拷贝"></a>简单拷贝</h3><p>只拷贝源对象和目标对象字段相同的部分，有两种实现，基于 EasyMapper 的 <code>Copiers.create()</code> 和基于 Cglib 的 <code>Copiers.createCglib()</code>，区别是 EasyMapper 不会拷贝值为 null 的字段，而Cglib则相反。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//拷贝对象，创建新对象，使用EasyMapper</span></div><div class="line">User user = User.of(<span class="string">"trang"</span>, <span class="number">25</span>);</div><div class="line">UserEntity entity = Copiers.create(User.class, UserEntity.class).copy(user);</div><div class="line"></div><div class="line"><span class="comment">//拷贝对象，传入目标对象</span></div><div class="line">User user = User.of(<span class="string">"trang"</span>, <span class="number">25</span>);</div><div class="line">UserEntity entity = UserEntity.of(<span class="string">"meng"</span>, <span class="number">24</span>);</div><div class="line">Copiers.create(User.class, UserEntity.class).copy(user, entity);</div><div class="line"></div><div class="line"><span class="comment">//拷贝List</span></div><div class="line">User user1 = User.of(<span class="string">"trang"</span>, <span class="number">25</span>);</div><div class="line">User user2 = User.of(<span class="string">"meng"</span>, <span class="number">24</span>);</div><div class="line">List&lt;User&gt; users = ImmutableList.of(user1, user2);</div><div class="line">List&lt;UserEntity&gt; entities = Copiers.create(User.class, UserEntity.class).map(users);</div><div class="line"></div><div class="line"><span class="comment">//拷贝对象，使用cglib，会拷贝null值</span></div><div class="line">User user = User.of(<span class="string">"trang"</span>, <span class="keyword">null</span>);</div><div class="line">UserEntity entity = UserEntity.of(<span class="string">"meng"</span>, <span class="number">24</span>);</div><div class="line">Copiers.createCglib(User.class, UserEntity.class).copy(user, entity);</div></pre></td></tr></table></figure>
<h3 id="复杂拷贝"><a href="#复杂拷贝" class="headerlink" title="复杂拷贝"></a>复杂拷贝</h3><p>若简单拷贝不满足业务需求，可以通过 <code>Copiers.createMapper()</code> 自定义映射关系，基于 EasyMapper 的特性实现，支持级联拷贝。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将源对象的name字段映射到目标对象的username字段</span></div><div class="line">Copiers.createMapper(User.class, UserEntity.class).field(<span class="string">"name"</span>, <span class="string">"username"</span>).register();</div><div class="line"></div><div class="line"><span class="comment">//排除拷贝字段</span></div><div class="line">Copiers.createMapper(User.class, UserEntity.class).skip(<span class="string">"name"</span>, <span class="string">"sex"</span>).register();</div><div class="line"></div><div class="line"><span class="comment">//强制拷贝值为null的字段，默认不拷贝</span></div><div class="line">Copiers.createMapper(User.class, UserEntity.class).skip(<span class="string">"name"</span>).isNull(<span class="keyword">true</span>).register();</div></pre></td></tr></table></figure>
<h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><p>QQ：349096849<br>Email：donghao.l@hotmail.com<br>Blog：<a href="http://blog.trang.space">Trang’s Blog</a></p>
]]></content>
    
    <summary type="html">
    
      Copiers 是一个优雅的 Bean 拷贝工具
    
    </summary>
    
      <category term="Java工具" scheme="http://blog.trang.space/categories/Java%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Tools" scheme="http://blog.trang.space/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Guava 学习手册</title>
    <link href="http://blog.trang.space/2016/07/21/Guava%20%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/"/>
    <id>http://blog.trang.space/2016/07/21/Guava 学习手册/</id>
    <published>2016-07-20T16:00:00.000Z</published>
    <updated>2016-07-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="com-google-common-base"><a href="#com-google-common-base" class="headerlink" title="com.google.common.base"></a>com.google.common.base</h2><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><p>Guava 把字符串处理动作分了几大类，每种动作都有对应的工具类实现，我们可以根据需要使用对应的工具类。</p>
<h4 id="CharMatcher"><a href="#CharMatcher" class="headerlink" title="CharMatcher"></a>CharMatcher</h4><p><code>com.google.common.base.CharMatcher</code> 是 Guava 提供的用于进行字符匹配的工具类，翻开 <code>CharMatcher</code> 的源码，我们知道 <code>CharMatcher</code> 是一个抽象类，在其内部 Guava 做了大量默认实现，用来更方便的对字符串做匹配，并通过构造者模式对匹配后的字符串进行处理。</p>
<p><strong>Note：不支持正则表达式。</strong></p>
<h4 id="Joiner"><a href="#Joiner" class="headerlink" title="Joiner"></a>Joiner</h4><p><code>com.google.common.base.Joiner</code> 用来拼接字符串，可以避免大量的手动拼接 <code>appendTo()</code> 方法，<code>Joiner</code> 可以实现 <code>Iterable&lt;?&gt;</code>、<code>Object[]</code>、<code>Map&lt;?, ?&gt;</code> 类型的拼接。但要实现基本类型数组的拼接就无能为力了，这时就需要借助 <code>com.google.common.base.primitives</code> 包的基本类型工具类来实现了。</p>
<p><code>Joiner</code> 底层通过 <code>StringBuilder</code> 实现，非线程安全。</p>
<h4 id="Splitter"><a href="#Splitter" class="headerlink" title="Splitter"></a>Splitter</h4><p><code>com.google.common.base.Splitter</code> 用来分割字符串，可以方便的以任意字符分割字符串，并提供转换为 <code>Map</code> 的方法 <code>MapSplitter.withKeyValueSeparator(String separator)</code>。</p>
<p><strong>Note：支持正则表达式分割字符串。</strong></p>
<h4 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h4><p><code>com.google.common.base.Strings</code> 的功能较少，Guava 提供的其它几个工具类已基本可以实现字符串处理的相关功能。</p>
<h4 id="Charsets"><a href="#Charsets" class="headerlink" title="Charsets"></a>Charsets</h4><p>字符串编码一直是我们很头疼的事情，相信我们都写过这样一行代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String s = <span class="string">"trang"</span>;</div><div class="line"><span class="keyword">byte</span>[] bytes = s.getBytes(Charset.forName(<span class="string">"UTF"</span>));</div></pre></td></tr></table></figure>
<p>这样写有很多缺点，首先我们的大脑得记住常用的字符串编码，不是 <code>UTF_</code>，不是 <code>UTF+</code>，只能是 <code>UTF-</code> 或者 <code>UTF</code>，其次错误输入后的后果也很严重，JVM 会抛出 <code>java.nio.charset.UnsupportedCharsetException</code> 异常。</p>
<p><code>com.google.common.base.Charsets</code> 给我们提供了一种便利的方式，<code>Charsets</code> 类提供了常见的 <code>Charset</code> 编码集，给我们的大脑腾出了位置并且避免了异常。</p>
<p><strong>Note：Java中提供了类似功能的 <code>java.nio.charset.StandardCharsets</code>类。</strong></p>
<h4 id="CaseFormat"><a href="#CaseFormat" class="headerlink" title="CaseFormat"></a>CaseFormat</h4><p><code>com.google.common.base.CaseFormat</code> 很机智的替我们解决的大小写转换的问题，并且提供了额外的内容。</p>
<p>在处理数据库与 POJO 的映射时，该类有奇效。</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LOWER_CAMEL</td>
<td style="text-align:left">小写驼峰</td>
<td style="text-align:left">lowerCamel</td>
</tr>
<tr>
<td style="text-align:left">LOWER_HYPHEN</td>
<td style="text-align:left">小写连接符</td>
<td style="text-align:left">lower-hyphen</td>
</tr>
<tr>
<td style="text-align:left">LOWER_UNDERSCORE</td>
<td style="text-align:left">小写下划线</td>
<td style="text-align:left">lower_underscore</td>
</tr>
<tr>
<td style="text-align:left">UPPER_CAMEL</td>
<td style="text-align:left">大写驼峰</td>
<td style="text-align:left">UpperCamel</td>
</tr>
<tr>
<td style="text-align:left">UPPER_UNDERSCORE</td>
<td style="text-align:left">大写下划线</td>
<td style="text-align:left">UPPER_UNDERSCORE</td>
</tr>
</tbody>
</table>
<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a><span id="function">函数式编程</span></h3><p>在 Java8 面世之前，Guava 一直是函数式编程的不二之选，但<strong>过度使用 Guava 函数式编程会导致冗长、混乱、可读性差而且低效的代码</strong>。这是迄今为止最容易（也是最经常）被滥用的部分，如果你想通过函数式风格达成一行代码，致使这行代码长到荒唐，Guava 团队会泪流满面。</p>
<p><code>Predicate</code> 和 <code>Function</code> 是函数式编程中最重要的两个接口，通常通过匿名内部类的方式实现自己的函数，也可以通过对应的工具类使用 Guava 已为你写好的函数。</p>
<h4 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h4><p><code>com.google.common.base.Predicate&lt;T&gt;</code>，断言预期结果，如果与预期不符则放弃。<code>Predicate</code> 只声明了一个方法 <code>boolean apply(T input)</code> ，使用时只需要实现断言表达式即可。</p>
<p><code>CharMatcher</code> 和 <code>Range</code> 也是通过 <code>Predicate</code> 实现的。</p>
<p>常见使用 Predicate 的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Iterables.filter(Iterable&lt;T&gt; unfiltered, Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</div><div class="line">FluentIterable.filter(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</div><div class="line">Collections.filter(Collection&lt;E&gt; unfiltered, Predicate&lt;? <span class="keyword">super</span> E&gt; predicate)</div><div class="line">Sets.filter(Set&lt;T&gt;, Predicate&lt;? <span class="keyword">super</span> T&gt;)</div><div class="line">Maps.filterKeys(Map&lt;K, V&gt; unfiltered, Predicate&lt;? <span class="keyword">super</span> K&gt; keyPredicate)</div><div class="line">Maps.filterValues(Map&lt;K, V&gt; unfiltered, Predicate&lt;? <span class="keyword">super</span> V&gt; valuePredicate)</div><div class="line">Maps.filterEntries(Map&lt;K, V&gt; unfiltered, Predicate&lt;? <span class="keyword">super</span> Entry&lt;K, V&gt;&gt; entryPredicate)</div><div class="line">Multimaps.filter(Predicate&lt;? <span class="keyword">super</span> E&gt; predicate)</div></pre></td></tr></table></figure>
<h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><p><code>com.google.common.base.Function&lt;F, T&gt;</code>，函数，<code>Function</code> 最常用的功能是转换集合，同样只需要实现 <code>T apply(F input)</code> 即可愉快的玩耍了。</p>
<p>常见使用 Function 的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">与`Predicate`基本一致</div></pre></td></tr></table></figure>
<h4 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h4><p><code>com.google.common.base.Supplier&lt;T&gt;</code> 可以对传入的对象进行包装构建后再输出。与前两个函数接口一样，<code>Supplier</code> 只提供了一个供实现的方法 <code>T get()</code>，用于获取包装后的对象。由于 <code>Supplier</code> 在对象的外层，所以 <code>Supplier</code> 的一个重要作用是赋予对象懒加载的特性。</p>
<h3 id="其它工具类"><a href="#其它工具类" class="headerlink" title="其它工具类"></a>其它工具类</h3><h4 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h4><p>Guava 用 <code>com.google.common.base.Optional</code> 表示可能为<code>null</code>的<code>T</code>类型引用。一个 <code>Optional</code> 实例可能包含非 <code>null</code> 的引用（我们称之为引用存在），也可能什么也不包括（称之为引用缺失）。它从不说包含的是 <code>null</code> 值，而是用存在或缺失来表示。但 <code>Optional</code> 从不会包含 <code>null</code> 值引用。</p>
<p><code>Optional</code> 最大的优点在于它是一种傻瓜式的防护。<code>Optional</code> 迫使你积极思考引用缺失的情况，因为你必须显式地从 <code>Optional</code> 获取引用。</p>
<h4 id="Stopwatch"><a href="#Stopwatch" class="headerlink" title="Stopwatch"></a>Stopwatch</h4><p><code>com.google.common.base.Stopwatch</code>是一种灵活的代替<code>System.currentTimeMillis()</code>和<code>System.nanoTime()</code>的方式。</p>
<p>你可以把<code>Stopwatch</code>想象成一个秒表，它支持暂停和重置，并且支持<code>java.util.concurrent.TimeUnit</code>的任何计时单位。</p>
<h2 id="com-google-common-collect"><a href="#com-google-common-collect" class="headerlink" title="com.google.common.collect"></a>com.google.common.collect</h2><h3 id="拓展集合"><a href="#拓展集合" class="headerlink" title="拓展集合"></a>拓展集合</h3><p>Guava对Java默认的集合做了大量拓展，以实现不同的业务需求。</p>
<h4 id="ImmutabelMap"><a href="#ImmutabelMap" class="headerlink" title="ImmutabelMap"></a>ImmutabelMap</h4><p>Guava的<code>Immutable</code>系列被很多人推崇，<code>Immutable</code>对象的数据在创建时提供，并且在整个生命周期内不可变，这样带来了一些好处：</p>
<pre><code>线程安全
节省空间，有效利用内存
可当做常量使用
</code></pre><p>以前我们常使用<code>Collections.unmodifiableXxx()</code>来定义常量集合，但我们都知道它是有缺陷的。以后当我们使用常量集合时，推荐大家使用Guava的<code>Immutable集合</code>，Guava把所有集合类都建立了对应的不可变集合。</p>
<p><strong>常见ImmutabelMap实现类：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">可变集合类型</th>
<th style="text-align:left">来源</th>
<th style="text-align:left">Guava不可变集合</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Collection</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">ImmutableCollection</td>
</tr>
<tr>
<td style="text-align:left">List</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">ImmutableList</td>
</tr>
<tr>
<td style="text-align:left">Set</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">ImmutableSet</td>
</tr>
<tr>
<td style="text-align:left">SortedSet</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">ImmutableSortedSet</td>
</tr>
<tr>
<td style="text-align:left">Map</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">ImmutableMap</td>
</tr>
<tr>
<td style="text-align:left">SortedMap</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">ImmutableSortedMap</td>
</tr>
<tr>
<td style="text-align:left">Multiset</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableMultiset</td>
</tr>
<tr>
<td style="text-align:left">SortedMultiset</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableSortedMultiset</td>
</tr>
<tr>
<td style="text-align:left">Multimap</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableMultimap</td>
</tr>
<tr>
<td style="text-align:left">ListMultimap</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableListMultimap</td>
</tr>
<tr>
<td style="text-align:left">SetMultimap</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableSetMultimap</td>
</tr>
<tr>
<td style="text-align:left">BiMap</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableBiMap</td>
</tr>
<tr>
<td style="text-align:left">ClassToInstanceMap</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableClassToInstanceMap</td>
</tr>
<tr>
<td style="text-align:left">TypeToInstanceMap</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableTypeToInstanceMap</td>
</tr>
<tr>
<td style="text-align:left">Table</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableTable</td>
</tr>
<tr>
<td style="text-align:left">RangeSet</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableRangeSet</td>
</tr>
<tr>
<td style="text-align:left">RangeMap</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableRangeMap</td>
</tr>
</tbody>
</table>
<p><em>Note：</em><br><em>当进行<code>add</code>、<code>remove</code>等操作时抛出<code>java.lang.UnsupportedOperationException</code>，该异常为运行时异常，并不会在编译时提醒你，需要开发时注意</em><br><em>所有<code>ImmutableMap</code>均不支持null值</em><br><em>所有<code>ImmutableMap</code>均不支持插入相同的key</em></p>
<h4 id="MultiSet"><a href="#MultiSet" class="headerlink" title="MultiSet"></a>MultiSet</h4><p><code>com.google.common.collect.Multiset&lt;E&gt;</code>和<code>Set</code>的区别是可以保存多个相同的对象。在JDK中，<code>List</code>和<code>Set</code>有一个基本的区别，就是List有序且可重复，而Set不能有重复，也不保证顺序（有些实现有顺序，例如<code>LinkedHashSet</code>和<code>SortedSet</code>等）所以<code>Multiset</code>占据了<code>List</code>和<code>Set</code>之间的一个灰色地带：允许重复，但不保证顺序。</p>
<p>常见使用场景：<code>Multiset</code>有一个有用的功能，就是跟踪每种对象的数量，所以你可以用来进行数字统计。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HashMultiset.&lt;Integer&gt;create().count(element);</div></pre></td></tr></table></figure></p>
<p><strong>常见MultiSet实现类：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">Value类型</th>
<th style="text-align:left">来源</th>
<th style="text-align:left">Gauva Multimap</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Enum</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">EnumMultiset</td>
</tr>
<tr>
<td style="text-align:left">HashMap</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">HashSetMultiset</td>
</tr>
<tr>
<td style="text-align:left">LinkedHashMap</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">LinkedHashMultiset</td>
</tr>
<tr>
<td style="text-align:left">TreeMap</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">TreeMultiset</td>
</tr>
<tr>
<td style="text-align:left">ConcurrentHashMap</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">ConcurrentHashMultiset</td>
</tr>
<tr>
<td style="text-align:left">ImmutableMap</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableMultiset</td>
</tr>
</tbody>
</table>
<h4 id="MultiMap"><a href="#MultiMap" class="headerlink" title="MultiMap"></a>MultiMap</h4><p>Guava中提供了形如<code>Map&lt;K, List&lt;V&gt;&gt;</code>或者<code>Map&lt;K, Set&lt;V&gt;&gt;</code>的新集合<code>com.google.common.collect.Multimap&lt;K, V&gt;</code>，方便的实现了把一个键对应到多个值的数据结构。</p>
<p><strong>常见MultiMap实现类：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">Value类型</th>
<th style="text-align:left">来源</th>
<th style="text-align:left">Gauva Multimap</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ArrayList</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">ArrayListMultimap</td>
</tr>
<tr>
<td style="text-align:left">LinkedList</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">LinkedListMultimap</td>
</tr>
<tr>
<td style="text-align:left">HashSet</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">HashMultimap</td>
</tr>
<tr>
<td style="text-align:left">LinkedHashSet</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">LinkedHashMultimap</td>
</tr>
<tr>
<td style="text-align:left">TreeSet</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">TreeMultimap</td>
</tr>
<tr>
<td style="text-align:left">ImmutableList</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableListMultimap</td>
</tr>
<tr>
<td style="text-align:left">ImmutableSet</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableSetMultimap</td>
</tr>
</tbody>
</table>
<p><em>Note：</em><br><em><code>MultiMap</code>并不是Map</em><br><em>除了两个<code>ImmutableMap</code>，其它均支持null键和null值</em></p>
<h4 id="BiMap"><a href="#BiMap" class="headerlink" title="BiMap"></a>BiMap</h4><p><code>com.google.common.collect.BiMap&lt;K, V&gt;</code>是一个双向Map，在<code>BiMap</code>中，键值都是唯一的。</p>
<p><strong>常见BiMap实现类：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">Value类型</th>
<th style="text-align:left">来源</th>
<th style="text-align:left">Gauva Multimap</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">HashMap</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">HashBiMap</td>
</tr>
<tr>
<td style="text-align:left">EnumMap</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">EnumBiMap</td>
</tr>
<tr>
<td style="text-align:left">EnumMap</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">EnumHashBiMap</td>
</tr>
<tr>
<td style="text-align:left">ImmutableMap</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableBiMap</td>
</tr>
</tbody>
</table>
<h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4><p><code>com.google.common.collect.Table&lt;R, C, V&gt;</code>代替了形如<code>Map&lt;FirstName, Map&lt;LastName, Person&gt;&gt;</code>的集合，通过行和列来确定唯一的值。</p>
<p><strong>常见Table实现类：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">Value类型</th>
<th style="text-align:left">来源</th>
<th style="text-align:left">Gauva Multimap</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">HashMap</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">HashBasedTable</td>
</tr>
<tr>
<td style="text-align:left">TreeMap</td>
<td style="text-align:left">JDK</td>
<td style="text-align:left">TreeBasedTable</td>
</tr>
<tr>
<td style="text-align:left">ImmutableMap</td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ImmutableTable</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">Guava</td>
<td style="text-align:left">ArrayTable</td>
</tr>
</tbody>
</table>
<h4 id="ClassToInstanceMap"><a href="#ClassToInstanceMap" class="headerlink" title="ClassToInstanceMap"></a>ClassToInstanceMap</h4><p><code>com.google.common.collect.ClassToInstanceMap&lt;B&gt;</code>是一种特殊的Map：它的键是类型，而值是符合键所指类型的对象。</p>
<p>Guava提供了两种有用的<code>ClassToInstanceMap</code>实现：<code>com.google.common.collect.MutableClassToInstanceMap</code>和 <code>com.google.common.collect.ImmutableClassToInstanceMap</code>。</p>
<p>为了扩展Map接口，<code>ClassToInstanceMap</code>额外声明了两个方法：<code>T getInstance(Class&lt;T&gt;)</code> 和<code>T putInstance(Class&lt;T&gt;, T)</code>，从而避免强制类型转换，同时保证了类型安全。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ClassToInstanceMap&lt;Object&gt; map = MutableClassToInstanceMap.create();</div><div class="line">map.putInstance(Integer.class, );</div><div class="line">map.putInstance(String.class, <span class="string">""</span>);</div></pre></td></tr></table></figure>
<p><em>Note：通常泛型<b>为<code>java.lang.Object</code></b></em></p>
<h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@TODO</span></div><div class="line">com.google.common.collect.Range&lt;C extends Comparable&gt;</div><div class="line">com.google.common.collect.RangeSet&lt;C extends Comparable&gt;</div><div class="line">com.google.common.collect.RangeMap&lt;K extends Comparable, V&gt;</div></pre></td></tr></table></figure>
<h3 id="集合工具类"><a href="#集合工具类" class="headerlink" title="集合工具类"></a>集合工具类</h3><p>Guava对JDK内置和Guava拓展的集合均开发了工具类，分别为<code>Collections</code>、<code>Iterables</code>、<code>Lists</code>、<code>Sets</code>、<code>Maps</code>、<code>Queues</code>、<code>Multisets</code>、<code>Multimaps</code>、<code>Tables</code>，里面囊括了异常强大的静态工具方法。</p>
<p><em>Guava对拓展的具体集合实现类没有提供基于工具类的初始化方法，而是直接在集合类中提供了静态工厂方法。</em></p>
<h4 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h4><p><code>com.google.common.collect.Collections</code>提供的方法不多，最常用的方法是函数编程的两个方法，具体内容在 <a href="#function">函数式编程</a>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">Collection&lt;E&gt; <span class="title">filter</span><span class="params">(Collection&lt;E&gt; unfiltered, Predicate&lt;? <span class="keyword">super</span> E&gt; predicate)</span></span></div><div class="line">Collection&lt;T&gt; <span class="title">transform</span><span class="params">(Collection&lt;F&gt; fromCollection, Function&lt;? <span class="keyword">super</span> F, T&gt; function)</span></div></pre></td></tr></table></figure>
<h4 id="Iterables"><a href="#Iterables" class="headerlink" title="Iterables"></a>Iterables</h4><p><code>com.google.common.collect.Iterables</code>为所有实现<code>java.lang.Iterable&lt;T&gt;</code>接口的类提供了大量实用方法。如果你使用了<code>Iterator</code>，Guava同样为你提供了<code>Iterators</code>，它们的作用基本一致。</p>
<p><code>Iterables</code>并不会傻瓜式的任何方法都会遍历对象，而是很精明的通过<code>instanceof</code>判断对象实际的类型，如果匹配上则调用该类型的方法，匹配不上才会遍历。</p>
<p><em>Note：建议用<code>Iterables</code>代替<code>Collections</code></em></p>
<h4 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h4><p><code>com.google.common.collect.Lists</code>提供了创建<code>List</code>的工厂方法，其余有用的有两个：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;List&lt;B&gt;&gt; cartesianProduct(List&lt;? extends List&lt;? extends B&gt;&gt; lists)</div><div class="line"><span class="function">List&lt;T&gt; <span class="title">reverse</span><span class="params">(List&lt;T&gt; list)</span></span></div></pre></td></tr></table></figure>
<p><code>Lists</code>没有函数编程的<code>filter()</code>方法，需要使用工厂方法代替实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Lists.newArrayList(Iterables.filter(from, Predicates.contains(Pattern.compile(&quot;[-]&quot;))));</div></pre></td></tr></table></figure></p>
<h4 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h4><p>由于<code>Set</code>的不重复特性，我们常用<code>Set</code>实现一些算法，而<code>com.google.common.collect.Sets</code>贴合实际的满足了我们的要求，提供了交集、并集、差集等多种运算方式，并定义了视图<code>com.google.common.collect.Sets.SetView</code>来展示结果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">SetView&lt;E&gt; <span class="title">intersection</span><span class="params">(<span class="keyword">final</span> Set&lt;E&gt; set, <span class="keyword">final</span> Set&lt;?&gt; set)</span></span></div><div class="line">SetView&lt;E&gt; <span class="title">union</span><span class="params">(<span class="keyword">final</span> Set&lt;? extends E&gt; set, <span class="keyword">final</span> Set&lt;? extends E&gt; set)</span></div><div class="line">SetView&lt;E&gt; <span class="title">difference</span><span class="params">(<span class="keyword">final</span> Set&lt;E&gt; set, <span class="keyword">final</span> Set&lt;?&gt; set)</span></div><div class="line">SetView&lt;E&gt; <span class="title">symmetricDifference</span><span class="params">(<span class="keyword">final</span> Set&lt;? extends E&gt; set, <span class="keyword">final</span> Set&lt;? extends E&gt; set)</span></div></pre></td></tr></table></figure>
<p><code>MultiSet</code>的工具类为<code>com.google.common.collect.MultiSet</code>。</p>
<h4 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h4><p><code>com.google.common.collect.Maps</code>提供了<code>Map</code>、<code>SortedMap</code>、<code>BiMap</code>的工厂方法及工具，<code>Multimap</code>的工具类为<code>com.google.common.collect.Multimaps</code>。</p>
<p><code>Maps</code>中比较常用的方法是<code>ImmutableMap&lt;K, V&gt; uniqueIndex(Iterable&lt;V&gt; values, Function&lt;? super V, K&gt; keyFunction)</code>。</p>
<h3 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h3><h4 id="ComparisonChain"><a href="#ComparisonChain" class="headerlink" title="ComparisonChain"></a>ComparisonChain</h4><p>在Java中，我们实现排序往往有两种方式：</p>
<pre><code>要排序的对象实现`java.lang.Comparable&lt;T&gt;`接口，重写`compareTo(T o)`方法
定义排序对象，实现`java.util.Comparator&lt;T&gt;`接口，重写`compare(T o, T o)`方法
</code></pre><p>重写比较方法是件麻烦的事情，Guava又一次帮我们逃离苦海，利用<code>com.google.common.collect.ComparisonChain</code>轻松愉快的完成比较方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public int compare(Cut cut, Cut cut) &#123;</div><div class="line">    // 按照Rorate -&gt; X -&gt; Y 排序</div><div class="line">    return ComparisonChain.start()</div><div class="line">              .compare(cut.getRotate(), cut.getRotate())</div><div class="line">              .compare(cut.getX(), cut.getX())</div><div class="line">              .compare(cut.getY(), cut.getY())</div><div class="line">              .result();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h4><p><code>ComparisonChain</code>带来的功能仍然比较单一，而Guava同时为我们提供了异常强大且方便的链式调用比较器<code>com.google.common.collect.Ordering&lt;T&gt;</code>，<code>Ordering</code>实现了<code>Comparator</code>接口，所以完全可以用<code>Ordering</code>替代<code>Comparator</code>。</p>
<p><code>Ordering</code>提供了大量的默认实现，每个比较器都提供了常见的链式调用方法，大家可以根据实际情况创建自己的比较器。</p>
<p><em>Note：</em><br><em>基本类型的比较可以使用<code>com.google.common.base.primitives</code>包</em><br><em>Java中提供了类似功能的<code>java.util.Comparators</code>类</em></p>
<h2 id="com-google-common-cache"><a href="#com-google-common-cache" class="headerlink" title="com.google.common.cache"></a>com.google.common.cache</h2><p>缓存是一个成熟的系统中必不可少的一环，合理利用缓存可以显著提升系统响应速度，减少I/O压力，Java常见的缓存有<code>Redis</code>、<code>Memcached</code>、<code>EhCache</code>等，而今天我们介绍的是Guava提供的本地缓存<code>Guava Cache</code>。</p>
<p><code>Guava Cache</code>在很多场景下都是相当有用的，比如初始化查找树，我们只需要对不同的树初始化一次，以后直接调用即可。</p>
<p><code>Guava Cache</code>与<code>ConcurrentMap</code>很相似，但不完全一样。最基本的区别是<code>ConcurrentMap</code>会一直保存所有添加的元素，直到显式地移除。相对地，<code>Guava Cache</code>为了限制内存占用，通常都设定为自动回收元素。</p>
<h3 id="应用缓存"><a href="#应用缓存" class="headerlink" title="应用缓存"></a>应用缓存</h3><h4 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h4><p><code>com.google.common.cache.Cache&lt;K, V&gt;</code>是<code>Guava Cache</code>的基本接口，Guava为我们提供了一个默认实现<code>LocalManualCache</code>，我们可以通过<code>CacheBuilder</code>工具类的工厂方法来创建<code>LocalManualCache</code>对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CacheBuilder.newBuilder().build()</div></pre></td></tr></table></figure>
<h4 id="CacheLoader"><a href="#CacheLoader" class="headerlink" title="CacheLoader"></a>CacheLoader</h4><p>在使用<code>Guava Cache</code>前，首先问自己一个问题：有没有合理的默认方法来加载与键关联的值？如果没有，<code>Cache</code>就是为你打造的，你需要在获取缓存的值时传入一个<code>Callable</code>实例来保证<code>Guava Cache</code>的作用。如果有，那么<code>CacheLoader</code>更适合你，而这也是今天的重点。</p>
<p><code>com.google.common.cache.LoadingCache&lt;K, V&gt;</code>是实现了<code>CacheLoader</code>的<code>Guava Cache</code>，与创建<code>Cache</code>实例时仅有一点不同，只需要调用<code>build()</code>的重载方法即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CacheBuilder.newBuilder().build(cacheLoader);</div></pre></td></tr></table></figure>
<p>正因为<code>LoadingCache</code>有了默认的加载方法，所以只需要调用<code>get(K key)</code>即可得到值。</p>
<h3 id="自定义缓存"><a href="#自定义缓存" class="headerlink" title="自定义缓存"></a>自定义缓存</h3><h4 id="CacheBuilder"><a href="#CacheBuilder" class="headerlink" title="CacheBuilder"></a>CacheBuilder</h4><p>从之前的代码中大家都看到了，<code>Guava Cache</code>的实例正是通过<code>CacheBuilder</code>创建的，事实上，<code>CacheBuilder</code>的作用远远不止这些，掌握好<code>CacheBuilder</code>，享受自定义<code>Guava Cache</code>的乐趣吧。</p>
<p><strong>自定义CacheBuilder参数：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">initialCapacity</td>
<td style="text-align:left">int</td>
<td style="text-align:left">初始化容量</td>
</tr>
<tr>
<td style="text-align:left">maximumSize</td>
<td style="text-align:left">long</td>
<td style="text-align:left">最大容量</td>
</tr>
<tr>
<td style="text-align:left">weigher</td>
<td style="text-align:left">Weigher</td>
<td style="text-align:left">权重函数</td>
</tr>
<tr>
<td style="text-align:left">maximumWeight</td>
<td style="text-align:left">long</td>
<td style="text-align:left">最大权重</td>
</tr>
<tr>
<td style="text-align:left">concurrencyLevel</td>
<td style="text-align:left">int</td>
<td style="text-align:left">并发级别</td>
</tr>
<tr>
<td style="text-align:left">expireAfterAccess</td>
<td style="text-align:left">long, TimeUnit</td>
<td style="text-align:left">上次访问给定时间后回收</td>
</tr>
<tr>
<td style="text-align:left">expireAfterWrite</td>
<td style="text-align:left">long, TimeUnit</td>
<td style="text-align:left">缓存写入给定时间后回收</td>
</tr>
<tr>
<td style="text-align:left">refreshAfterWrite</td>
<td style="text-align:left">long, TimeUnit</td>
<td style="text-align:left">缓存写入给定时间后更新</td>
</tr>
<tr>
<td style="text-align:left">removalListener</td>
<td style="text-align:left">RemovalListener</td>
<td style="text-align:left">移除监听器(同步)</td>
</tr>
<tr>
<td style="text-align:left">recordStats</td>
<td style="text-align:left"></td>
<td style="text-align:left">统计状态</td>
</tr>
</tbody>
</table>
<p><code>CacheBuilder</code>提供了一系列的参数供我们个性化，主要是为了缓存的回收。<code>CacheBuilder</code>创建的实例并不会自动清理失效的缓存，而是在你进行读或写操作的时候顺带维护。这样做的原因在于，如果要自动地持续清理缓存，就必须有一个线程，这个线程会和用户操作竞争共享锁。</p>
<h2 id="com-google-common-net"><a href="#com-google-common-net" class="headerlink" title="com.google.common.net"></a>com.google.common.net</h2><p><strong>常用类</strong><br><strong>@Beta:</strong> <code>HostAndPort</code> <code>HostSpecifier</code> <code>InetAddresses</code> <code>InternetDomainName</code> <code>MediaType</code> <code>PercentEscaper</code> <code>UrlEscapers</code></p>
<p><strong>@Release:</strong> <code>HttpHeaders</code><br>Guava中的<code>com.google.common.net</code>包目前提供的功能较少，而且大多类都标注了@Beta的注解，在Guava中标记@Beta表示这个类还不稳定，有可能在以后的版本中变化，或者去掉，所以不建议大量使用，这里也是只做简单的介绍。</p>
<h3 id="HttpHeaders"><a href="#HttpHeaders" class="headerlink" title="HttpHeaders"></a>HttpHeaders</h3><p>先介绍下唯一一个没有@Beta注解的类<code>HttpHeaders</code>，这个类中并没有实质的方法，只是定义了一些Http头名称的常量，通常如果需要我们会自己定义这些常量，如果你引用了Guava包，那么就不再建议我们自己定义这些头名称的常量了，直接用它定义的即可。</p>
<p>这里面应该有几乎所有的Http头名称，例如：<code>X_FORWARDED_FOR</code>，<code>CONTENT_TYPE</code>，<code>ACCEPT</code>等，用法也没有必要介绍了，直接引用常量就可以了。</p>
<h3 id="HostAndPort"><a href="#HostAndPort" class="headerlink" title="HostAndPort"></a>HostAndPort</h3><p>有时候我们需要得到请求的ip，这时候通畅需要自己写方法解析url。而Guava给我们提供的<code>HostAndPort</code>类正是做这种事情的利器，可以从字符串中得到ip和port<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HostAndPort.fromString(String hostPortString)</div></pre></td></tr></table></figure></p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ol>
<li><a href="http://google.github.io/guava/releases/snapshot/api/docs/" target="_blank" rel="external">Guava API</a></li>
<li><a href="http://ajoo.iteye.com/category/119082" target="_blank" rel="external">瓜娃系列</a></li>
<li><a href="http://ifeve.com/google-guava/" target="_blank" rel="external">Guava官方文档</a></li>
<li><a href="http://www.yiibai.com/guava/" target="_blank" rel="external">Guava教程</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Guava 是 Google 的一个开源项目，包含许多 Google 核心的 Java 常用库
    
    </summary>
    
      <category term="技术内幕" scheme="http://blog.trang.space/categories/%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/"/>
    
    
      <category term="Tools" scheme="http://blog.trang.space/tags/Tools/"/>
    
  </entry>
  
</feed>
